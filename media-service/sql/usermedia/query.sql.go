// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package userMedia

import (
	"context"

	"github.com/google/uuid"
)

const createImage = `-- name: CreateImage :one
INSERT INTO user_images(user_id, image_id)
VALUES ($1, $2 ) RETURNING id, user_id, image_id, created_at
`

type CreateImageParams struct {
	UserID  int32
	ImageID uuid.UUID
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (UserImage, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.UserID, arg.ImageID)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteImageById = `-- name: DeleteImageById :exec
DELETE
FROM user_images
WHERE id = $1
`

func (q *Queries) DeleteImageById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteImageById, id)
	return err
}

const deleteImagesByUserId = `-- name: DeleteImagesByUserId :exec
DELETE
FROM user_images
WHERE user_id = $1
`

func (q *Queries) DeleteImagesByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteImagesByUserId, userID)
	return err
}

const getAllImageIds = `-- name: GetAllImageIds :many
SELECT id, user_id, image_id, created_at
FROM user_images
`

func (q *Queries) GetAllImageIds(ctx context.Context) ([]UserImage, error) {
	rows, err := q.db.QueryContext(ctx, getAllImageIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserImage
	for rows.Next() {
		var i UserImage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageById = `-- name: GetImageById :one
SELECT id, user_id, image_id, created_at
FROM user_images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImageById(ctx context.Context, id int32) (UserImage, error) {
	row := q.db.QueryRowContext(ctx, getImageById, id)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const getImagesByUserId = `-- name: GetImagesByUserId :many
SELECT id, user_id, image_id, created_at
FROM user_images
WHERE user_id = $1
`

func (q *Queries) GetImagesByUserId(ctx context.Context, userID int32) ([]UserImage, error) {
	rows, err := q.db.QueryContext(ctx, getImagesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserImage
	for rows.Next() {
		var i UserImage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByUserIdPaged = `-- name: GetImagesByUserIdPaged :many
SELECT id, user_id, image_id, created_at
FROM user_images
WHERE user_id = $1
ORDER BY created_at limit $2 OFFSET $3
`

type GetImagesByUserIdPagedParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetImagesByUserIdPaged(ctx context.Context, arg GetImagesByUserIdPagedParams) ([]UserImage, error) {
	rows, err := q.db.QueryContext(ctx, getImagesByUserIdPaged, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserImage
	for rows.Next() {
		var i UserImage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
UPDATE user_images
SET image_id = $2
WHERE id = $1 RETURNING id, user_id, image_id, created_at
`

type UpdateImageParams struct {
	ID      int32
	ImageID uuid.UUID
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (UserImage, error) {
	row := q.db.QueryRowContext(ctx, updateImage, arg.ID, arg.ImageID)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}
