// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package users

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkFollow = `-- name: CheckFollow :one
SELECT exists( select 1 FROM follow WHERE friend_a = $1 AND friend_b = $2)
`

type CheckFollowParams struct {
	FriendA int32
	FriendB int32
}

func (q *Queries) CheckFollow(ctx context.Context, arg CheckFollowParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkFollow, arg.FriendA, arg.FriendB)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createFollow = `-- name: CreateFollow :exec
INSERT INTO follow(friend_a, friend_b)
VALUES ($1, $2) RETURNING id, friend_a, friend_b
`

type CreateFollowParams struct {
	FriendA int32
	FriendB int32
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFollow, arg.FriendA, arg.FriendB)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(user_id, username, email, first_name, last_name)
VALUES ($1, $2, $3, $4, $5) RETURNING user_id
`

type CreateUserParams struct {
	UserID    int32
	Username  string
	Email     string
	FirstName string
	LastName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follow WHERE friend_a = $1 AND friend_b = $2
`

type DeleteFollowParams struct {
	FriendA int32
	FriendB int32
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.FriendA, arg.FriendB)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getFollowByFriendA = `-- name: GetFollowByFriendA :one
SELECT id, user_id, username, email, first_name, last_name, last_upload, last_image_id
FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFollowByFriendA(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getFollowByFriendA, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.LastUpload,
		&i.LastImageID,
	)
	return i, err
}

const getLatestPhotos = `-- name: GetLatestPhotos :many
SELECT friend_b, last_upload, last_image_id FROM follow JOIN users on follow.friend_b
= users.id where follow.friend_a = $1 ORDER BY last_upload LIMIT $2
`

type GetLatestPhotosParams struct {
	FriendA int32
	Limit   int32
}

type GetLatestPhotosRow struct {
	FriendB     int32
	LastUpload  sql.NullTime
	LastImageID uuid.NullUUID
}

func (q *Queries) GetLatestPhotos(ctx context.Context, arg GetLatestPhotosParams) ([]GetLatestPhotosRow, error) {
	rows, err := q.db.QueryContext(ctx, getLatestPhotos, arg.FriendA, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatestPhotosRow
	for rows.Next() {
		var i GetLatestPhotosRow
		if err := rows.Scan(&i.FriendB, &i.LastUpload, &i.LastImageID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_id, username, email, first_name, last_name, last_upload, last_image_id
FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.LastUpload,
		&i.LastImageID,
	)
	return i, err
}

const getUserByFirstName = `-- name: GetUserByFirstName :one
SELECT id, user_id, username, email, first_name, last_name, last_upload, last_image_id
FROM users
WHERE first_name = $1 LIMIT $2
`

type GetUserByFirstNameParams struct {
	FirstName string
	Limit     int32
}

func (q *Queries) GetUserByFirstName(ctx context.Context, arg GetUserByFirstNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByFirstName, arg.FirstName, arg.Limit)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.LastUpload,
		&i.LastImageID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, user_id, username, email, first_name, last_name, last_upload, last_image_id
FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.LastUpload,
		&i.LastImageID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, user_id, username, email, first_name, last_name, last_upload, last_image_id
FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.LastUpload,
		&i.LastImageID,
	)
	return i, err
}

const getUsersByFields = `-- name: GetUsersByFields :many
SELECT user_id, username, first_name, last_name
FROM users
WHERE username = $1 or email = $2 or first_name = $3 or last_name = $4 LIMIT $5
`

type GetUsersByFieldsParams struct {
	Username  string
	Email     string
	FirstName string
	LastName  string
	Limit     int32
}

type GetUsersByFieldsRow struct {
	UserID    int32
	Username  string
	FirstName string
	LastName  string
}

func (q *Queries) GetUsersByFields(ctx context.Context, arg GetUsersByFieldsParams) ([]GetUsersByFieldsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByFields,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByFieldsRow
	for rows.Next() {
		var i GetUsersByFieldsRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByLastName = `-- name: GetUsersByLastName :many
SELECT id, user_id, username, email, first_name, last_name, last_upload, last_image_id
FROM users
WHERE last_name = $1 LIMIT $2
`

type GetUsersByLastNameParams struct {
	LastName string
	Limit    int32
}

func (q *Queries) GetUsersByLastName(ctx context.Context, arg GetUsersByLastNameParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByLastName, arg.LastName, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.LastUpload,
			&i.LastImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_id, username, email, first_name, last_name, last_upload, last_image_id
FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.LastUpload,
			&i.LastImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set username   = $2,
    email      =$3,
    first_name = $4,
    last_name  = $5
WHERE id = $1 RETURNING id, user_id, username, email, first_name, last_name, last_upload, last_image_id
`

type UpdateUserParams struct {
	ID        int32
	Username  string
	Email     string
	FirstName string
	LastName  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.LastUpload,
		&i.LastImageID,
	)
	return i, err
}

const updateUserLastUpload = `-- name: UpdateUserLastUpload :exec
UPDATE users SET last_upload = $1, last_image_id = $2 WHERE user_id = $3
`

type UpdateUserLastUploadParams struct {
	LastUpload  sql.NullTime
	LastImageID uuid.NullUUID
	UserID      int32
}

func (q *Queries) UpdateUserLastUpload(ctx context.Context, arg UpdateUserLastUploadParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLastUpload, arg.LastUpload, arg.LastImageID, arg.UserID)
	return err
}
