// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package post

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post(body,author,author_name,image_id,created_at)
VALUES ($1, $2, $3, $4, $5) RETURNING id, body, author, author_name, image_id, created_at
`

type CreatePostParams struct {
	Body       string
	Author     uuid.UUID
	AuthorName string
	ImageID    uuid.NullUUID
	CreatedAt  time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Body,
		arg.Author,
		arg.AuthorName,
		arg.ImageID,
		arg.CreatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Author,
		&i.AuthorName,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE
FROM post
WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostById, id)
	return err
}

const deletePostByUserId = `-- name: DeletePostByUserId :exec
DELETE
FROM post
WHERE author = $1
`

func (q *Queries) DeletePostByUserId(ctx context.Context, author uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostByUserId, author)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, body, author, author_name, image_id, created_at
FROM post
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Author,
			&i.AuthorName,
			&i.ImageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, body, author, author_name, image_id, created_at
FROM post
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Author,
		&i.AuthorName,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const getPostByUserIdPaged = `-- name: GetPostByUserIdPaged :many
SELECT id, body, author, author_name, image_id, created_at
FROM post
WHERE author = $1
ORDER BY created_at limit $2 offset $3
`

type GetPostByUserIdPagedParams struct {
	Author uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetPostByUserIdPaged(ctx context.Context, arg GetPostByUserIdPagedParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByUserIdPaged, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Author,
			&i.AuthorName,
			&i.ImageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserId = `-- name: GetPostsByUserId :many
SELECT id, body, author, author_name, image_id, created_at
FROM post
WHERE author = $1
`

func (q *Queries) GetPostsByUserId(ctx context.Context, author uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserId, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Author,
			&i.AuthorName,
			&i.ImageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE post
SET body = $2
WHERE id = $1 RETURNING id, body, author, author_name, image_id, created_at
`

type UpdatePostParams struct {
	ID   uuid.UUID
	Body string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Body)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Author,
		&i.AuthorName,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}
