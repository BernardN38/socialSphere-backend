version: '3.8'

services:
  krakend:
    image: devopsfaith/krakend:2.0
    volumes:
      - "../api-gateway/config:/etc/krakend/"
    ports:
      - "1234:1234"
      - "8080:8080"
      - "8090:8090"
    command: [ "run", "-d", "-c", "/etc/krakend/krakend.json" ]

  rabbitmq:
    hostname: 'dev-rabbitmq'
    image: 'rabbitmq:3-management'
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 4G
    volumes:
      - ../rabbit-init/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ../rabbit-init/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ../db-data/rabbitmq:/var/lib/rabbitmq

  postgres:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=bernardn
      - POSTGRES_PASSWORD=password
      - APP_DB_USER=postgres
      - APP_DB_PASS=password
      - AUTH_DB_NAME=authentication_service
      - POST_DB_NAME=post_service
      - IMAGE_DB_NAME=image_service
      - IDENTITY_DB_NAME=identity_service
      - FRIEND_DB_NAME=friend_service
      - NOTIFICATION_DB_NAME=notification_service
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5438:5432'
    volumes:
      - ../postgres-data:/var/lib/postgresql/data
      - ../database-init:/docker-entrypoint-initdb.d/

  mongo:
    image: mongo
    restart: always
    volumes:
      - ${PWD}/mongo_data:/data/db
      # - ./mongo-init/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      
  redis:
    image: "redis:alpine"
    command: redis-server --requirepass password
    # ports:
    #  - "6379:6379"
    volumes:
      - $PWD/redis-data:/var/lib/redis
      - $PWD/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
     - REDIS_REPLICATION_MODE=master

  
  minio:
    image: minio/minio
    command: server --address ":9000" --console-address ":9001" /data
    ports:
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    volumes:
      - ${PWD}/minio-data:/data

  image-proccessing-service-worker:
    build:
      context: ../image-proccessing-service-worker
      dockerfile: ./image-proccessing-service-worker.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 4G
            reservations:
              cpus: "0.25"
              memory: 128M

  authentication-service:
    build:
      context: ../authentication-service
      dockerfile: ./authentication-service.dockerfile
    ports:
      - "9000:9000"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 512M
            reservations:
              cpus: "0.25"
              memory: 128M
    environment:
      DSN: "user=bernardn password=password host=postgres dbname=authentication_service port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      rabbitMQUrl: "amqp://guest:guest@rabbitmq"
      port: ":8080"

  post-service:
      build:
        context: ../post-service
        dockerfile: ./post-service.dockerfile
      restart: always
      deploy:
        mode: replicated
        replicas: 1
        resources:
            limits:
              cpus: "1"
              memory: 512M
            reservations:
              cpus: "0.25"
              memory: 128M
      environment:
        DSN: "user=bernardn password=password host=postgres dbname=post_service port=5432 sslmode=disable"
        jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
        rabbitMQUrl: "amqp://guest:guest@rabbitmq"
        minioKey: minio
        minioSecret: minio123
        port: ":8080"

  image-service:
    build:
      context: ../image-service
      dockerfile: ./image-service.dockerfile
    ports:
      - "6060:6060"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 4G
            reservations:
              cpus: "0.25"
              memory: 128M
    environment:
      DSN: "user=bernardn password=password host=postgres dbname=image_service port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      rabbitMQUrl: "amqp://guest:guest@rabbitmq"
      minioKey: minio
      minioSecret: minio123
      port: ":8080"

  identity-service:
    build:
      context: ../identity-service
      dockerfile: ./identity-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 512M
            reservations:
              cpus: "0.25"
              memory: 128M
    environment:
      DSN: "user=bernardn password=password host=postgres dbname=identity_service port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      rabbitMQUrl: "amqp://guest:guest@rabbitmq"
      port: ":8080"
  
  messaging-service:
    build: 
      context: ../messaging-service
      dockerfile: ./messaging-service.dockerfile
    ports:
      - "8086:8080"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 512M
            reservations:
              cpus: "0.25"
              memory: 128M
    environment:
        jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
        port: ":8080"
        mongoUri: "mongodb://root:password@mongo:27017/?maxPoolSize=20&w=majority"

  friend-service:
    build: 
      context: ../friend-service
      dockerfile: ./friend-service.dockerfile
    ports:
      - "8085:8080"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 512M
            reservations:
              cpus: "0.25"
              memory: 128M
    environment:
        DSN: "user=bernardn password=password host=postgres dbname=friend_service port=5432 sslmode=disable"
        jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
        rabbitMQUrl: "amqp://guest:guest@rabbitmq"
        port: ":8080"

  notification-service:
    build:
      context: ../notificationService
      dockerfile: ./notification-service.dockerfile
    ports:
      - 8088:8080
    deploy:
      mode: replicated
      replicas: 1
      resources:
            limits:
              cpus: "1"
              memory: 512M
            reservations:
              cpus: "0.25"
              memory: 128M
    environment:
        DATABASE_URL: "jdbc:postgresql://postgres:5432/notification_service"
        jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
        rabbitMQUrl: "amqp://guest:guest@rabbitmq"
        port: "8082"
